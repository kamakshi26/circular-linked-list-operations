#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *start=NULL,*temp;
void create();
void display();
void search(int);
void sort();
void update();
void reverse(struct node *temp);
int main()
{
    int num,no;
     printf("1.Creation\n");
    printf("2.display");
    printf("\n3.Search\n4.sort\n5.update\n6.reverse\n");
    while(1)
    {
    printf("enter choice:\n");
    scanf("%d",&num);
    switch(num)
        {
        case 1:
            create(); 
            break;
        case 2:
            display(); 
            break;
        case 3:
             
            printf("enter the element to search:\n");
        scanf("%d",&no);
        search(no);
            break;
       case 4:
            sort();
            break;
       case 5:
            update();
            break;
        case 6:
            
            reverse(start);
            break;
            
    
        default:
            exit(0);
        }
    }
}
void create()
{
    struct node*temp,*ptr;
     temp=(struct node*)malloc(sizeof(struct node));
     printf("enter data:\n");
     scanf("%d",&temp->data);
     if(start==NULL)
     {
         start=temp;
         start->next=start;
     }
     else
     {
         ptr=start;
         while(ptr->next!=start)
         {
             ptr=ptr->next;
         }
         ptr->next=temp;
         temp->next=start;
     }
}
void display()
{
    struct node*temp=start;
    if(start==NULL)
    {
        printf("no list\n");
    }
    else
    {   printf("elements are:\n");
        while(temp->next!=start)
        {   
            printf("%d->",temp->data);
            temp=temp->next;
        }
        printf("%d->",temp->data);printf("\n");
    }
}
void search(int no)
{   
    int count=0,flag=0;
    struct node*temp=start;
    if(start==NULL)
    {
        printf("empty list\n");
    }
    else
    {
        
        while(temp->next!=start)
        {   count=count+1;
            if(temp->data==no)
            {
                printf("element found at position %d\n",count);
                flag=1;
                break;
            }
            temp=temp->next;
        }
        if(flag==0 && temp->next==start && temp->data==no)
        {
            printf("element found at pos %d\n",count+1);
        }
        else if(flag==0)
        printf("element not found\n");
    }
}
void sort()
{   int num;
    struct node*temp=start,*pre;
    if(start==NULL)
    {
        printf("empty list\n");
        return;
    }
    
    while(temp->next!=start)
    {
        pre=temp->next;
        while(pre!=start)
        {
        if(temp->data>pre->data)
        {
            num=temp->data;
            temp->data=pre->data;
            pre->data=num;
        }
             pre=pre->next;
         }
       temp=temp->next; 
    }
}
void update()
{   
    int a,b,flag=0;
    struct node*temp=start;
    if(start==NULL)
    {
        printf("empty list\n");
        return;
    }
    printf("enter the element to be updated:\n");
    scanf("%d",&a);
    printf("enter  update element:\n");
    scanf("%d",&b);
    while(temp->next!=start)
    {
        if(temp->data==a)
        {
            temp->data=b;
            flag=1;
            break;
        }temp=temp->next;
    }
    if(flag==0 && temp->next==start && temp->data==a)
    {
         temp->data=b;
            flag=1;
    }
    if(flag==1)
    printf("updated\n");
    else
    printf("not updated\n");
    return;
}
void reverse(struct node *temp)
{
    int i = 0;
 
    if (start == NULL)
    {
        printf("empty linked list");
    }
    else
    {   
        if (temp->next !=  start)
        {
            i = temp->data;
            reverse(temp->next);
            printf("%d->", i);
        }
        if (temp->next == start)
        {
            printf("%d->", temp->data);
        }
    }
}

